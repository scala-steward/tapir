// auto-generated by sbt-boilerplate
package sttp.tapir.typelevel

import scala.annotation.implicitNotFound

/** View parameters (single type or a tuple) as arguments of a function of the appropriate arity.
  */
trait ParamsAsArgs[I] {
  // FN[R] = (I as args) => R
  type FN[_]

  def toFn[O](f: I => O): FN[O]
  def paramAt(params: I, i: Int): Any
  def applyFn[R](f: FN[R], args: I): R
  def andThen[R, R2](f: FN[R], m: R => R2): FN[R2]
}

object ParamsAsArgs extends LowPriorityParamsAsArgs1 {

  implicit def tuple2ToFn[A1, A2]: Aux[Tuple2[A1, A2], (A1, A2) => *] = new ParamsAsArgs[Tuple2[A1, A2]] {
    type FN[O] = (A1, A2) => O
    override def toFn[R](f: Tuple2[A1, A2] => R): (A1, A2) => R = (a1, a2) => f(Tuple2(a1, a2))
    override def paramAt(params: Tuple2[A1, A2], i: Int): Any = params.productElement(i)
    override def applyFn[R](f: (A1, A2) => R, args: Tuple2[A1, A2]): R = f(args._1, args._2)
    override def andThen[R, RR](f: (A1, A2) => R, m: R => RR): (A1, A2) => RR = (a1, a2) => m(f(a1, a2))
  }
  implicit def tuple3ToFn[A1, A2, A3]: Aux[Tuple3[A1, A2, A3], (A1, A2, A3) => *] = new ParamsAsArgs[Tuple3[A1, A2, A3]] {
    type FN[O] = (A1, A2, A3) => O
    override def toFn[R](f: Tuple3[A1, A2, A3] => R): (A1, A2, A3) => R = (a1, a2, a3) => f(Tuple3(a1, a2, a3))
    override def paramAt(params: Tuple3[A1, A2, A3], i: Int): Any = params.productElement(i)
    override def applyFn[R](f: (A1, A2, A3) => R, args: Tuple3[A1, A2, A3]): R = f(args._1, args._2, args._3)
    override def andThen[R, RR](f: (A1, A2, A3) => R, m: R => RR): (A1, A2, A3) => RR = (a1, a2, a3) => m(f(a1, a2, a3))
  }
  implicit def tuple4ToFn[A1, A2, A3, A4]: Aux[Tuple4[A1, A2, A3, A4], (A1, A2, A3, A4) => *] = new ParamsAsArgs[Tuple4[A1, A2, A3, A4]] {
    type FN[O] = (A1, A2, A3, A4) => O
    override def toFn[R](f: Tuple4[A1, A2, A3, A4] => R): (A1, A2, A3, A4) => R = (a1, a2, a3, a4) => f(Tuple4(a1, a2, a3, a4))
    override def paramAt(params: Tuple4[A1, A2, A3, A4], i: Int): Any = params.productElement(i)
    override def applyFn[R](f: (A1, A2, A3, A4) => R, args: Tuple4[A1, A2, A3, A4]): R = f(args._1, args._2, args._3, args._4)
    override def andThen[R, RR](f: (A1, A2, A3, A4) => R, m: R => RR): (A1, A2, A3, A4) => RR = (a1, a2, a3, a4) => m(f(a1, a2, a3, a4))
  }
  implicit def tuple5ToFn[A1, A2, A3, A4, A5]: Aux[Tuple5[A1, A2, A3, A4, A5], (A1, A2, A3, A4, A5) => *] =
    new ParamsAsArgs[Tuple5[A1, A2, A3, A4, A5]] {
      type FN[O] = (A1, A2, A3, A4, A5) => O
      override def toFn[R](f: Tuple5[A1, A2, A3, A4, A5] => R): (A1, A2, A3, A4, A5) => R = (a1, a2, a3, a4, a5) =>
        f(Tuple5(a1, a2, a3, a4, a5))
      override def paramAt(params: Tuple5[A1, A2, A3, A4, A5], i: Int): Any = params.productElement(i)
      override def applyFn[R](f: (A1, A2, A3, A4, A5) => R, args: Tuple5[A1, A2, A3, A4, A5]): R =
        f(args._1, args._2, args._3, args._4, args._5)
      override def andThen[R, RR](f: (A1, A2, A3, A4, A5) => R, m: R => RR): (A1, A2, A3, A4, A5) => RR = (a1, a2, a3, a4, a5) =>
        m(f(a1, a2, a3, a4, a5))
    }
  implicit def tuple6ToFn[A1, A2, A3, A4, A5, A6]: Aux[Tuple6[A1, A2, A3, A4, A5, A6], (A1, A2, A3, A4, A5, A6) => *] =
    new ParamsAsArgs[Tuple6[A1, A2, A3, A4, A5, A6]] {
      type FN[O] = (A1, A2, A3, A4, A5, A6) => O
      override def toFn[R](f: Tuple6[A1, A2, A3, A4, A5, A6] => R): (A1, A2, A3, A4, A5, A6) => R = (a1, a2, a3, a4, a5, a6) =>
        f(Tuple6(a1, a2, a3, a4, a5, a6))
      override def paramAt(params: Tuple6[A1, A2, A3, A4, A5, A6], i: Int): Any = params.productElement(i)
      override def applyFn[R](f: (A1, A2, A3, A4, A5, A6) => R, args: Tuple6[A1, A2, A3, A4, A5, A6]): R =
        f(args._1, args._2, args._3, args._4, args._5, args._6)
      override def andThen[R, RR](f: (A1, A2, A3, A4, A5, A6) => R, m: R => RR): (A1, A2, A3, A4, A5, A6) => RR =
        (a1, a2, a3, a4, a5, a6) => m(f(a1, a2, a3, a4, a5, a6))
    }
  implicit def tuple7ToFn[A1, A2, A3, A4, A5, A6, A7]: Aux[Tuple7[A1, A2, A3, A4, A5, A6, A7], (A1, A2, A3, A4, A5, A6, A7) => *] =
    new ParamsAsArgs[Tuple7[A1, A2, A3, A4, A5, A6, A7]] {
      type FN[O] = (A1, A2, A3, A4, A5, A6, A7) => O
      override def toFn[R](f: Tuple7[A1, A2, A3, A4, A5, A6, A7] => R): (A1, A2, A3, A4, A5, A6, A7) => R = (a1, a2, a3, a4, a5, a6, a7) =>
        f(Tuple7(a1, a2, a3, a4, a5, a6, a7))
      override def paramAt(params: Tuple7[A1, A2, A3, A4, A5, A6, A7], i: Int): Any = params.productElement(i)
      override def applyFn[R](f: (A1, A2, A3, A4, A5, A6, A7) => R, args: Tuple7[A1, A2, A3, A4, A5, A6, A7]): R =
        f(args._1, args._2, args._3, args._4, args._5, args._6, args._7)
      override def andThen[R, RR](f: (A1, A2, A3, A4, A5, A6, A7) => R, m: R => RR): (A1, A2, A3, A4, A5, A6, A7) => RR =
        (a1, a2, a3, a4, a5, a6, a7) => m(f(a1, a2, a3, a4, a5, a6, a7))
    }
  implicit def tuple8ToFn[A1, A2, A3, A4, A5, A6, A7, A8]
      : Aux[Tuple8[A1, A2, A3, A4, A5, A6, A7, A8], (A1, A2, A3, A4, A5, A6, A7, A8) => *] =
    new ParamsAsArgs[Tuple8[A1, A2, A3, A4, A5, A6, A7, A8]] {
      type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8) => O
      override def toFn[R](f: Tuple8[A1, A2, A3, A4, A5, A6, A7, A8] => R): (A1, A2, A3, A4, A5, A6, A7, A8) => R =
        (a1, a2, a3, a4, a5, a6, a7, a8) => f(Tuple8(a1, a2, a3, a4, a5, a6, a7, a8))
      override def paramAt(params: Tuple8[A1, A2, A3, A4, A5, A6, A7, A8], i: Int): Any = params.productElement(i)
      override def applyFn[R](f: (A1, A2, A3, A4, A5, A6, A7, A8) => R, args: Tuple8[A1, A2, A3, A4, A5, A6, A7, A8]): R =
        f(args._1, args._2, args._3, args._4, args._5, args._6, args._7, args._8)
      override def andThen[R, RR](f: (A1, A2, A3, A4, A5, A6, A7, A8) => R, m: R => RR): (A1, A2, A3, A4, A5, A6, A7, A8) => RR =
        (a1, a2, a3, a4, a5, a6, a7, a8) => m(f(a1, a2, a3, a4, a5, a6, a7, a8))
    }
  implicit def tuple9ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9]
      : Aux[Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9], (A1, A2, A3, A4, A5, A6, A7, A8, A9) => *] =
    new ParamsAsArgs[Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9]] {
      type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9) => O
      override def toFn[R](f: Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9] => R): (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R =
        (a1, a2, a3, a4, a5, a6, a7, a8, a9) => f(Tuple9(a1, a2, a3, a4, a5, a6, a7, a8, a9))
      override def paramAt(params: Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9], i: Int): Any = params.productElement(i)
      override def applyFn[R](f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R, args: Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9]): R =
        f(args._1, args._2, args._3, args._4, args._5, args._6, args._7, args._8, args._9)
      override def andThen[R, RR](f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R, m: R => RR): (A1, A2, A3, A4, A5, A6, A7, A8, A9) => RR =
        (a1, a2, a3, a4, a5, a6, a7, a8, a9) => m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9))
    }
  implicit def tuple10ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]
      : Aux[Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10], (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => *] =
    new ParamsAsArgs[Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]] {
      type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => O
      override def toFn[R](f: Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10] => R): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R =
        (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) => f(Tuple10(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10))
      override def paramAt(params: Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10], i: Int): Any = params.productElement(i)
      override def applyFn[R](
          f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R,
          args: Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]
      ): R = f(args._1, args._2, args._3, args._4, args._5, args._6, args._7, args._8, args._9, args._10)
      override def andThen[R, RR](
          f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R,
          m: R => RR
      ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => RR = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10))
    }
  implicit def tuple11ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]
      : Aux[Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11], (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => *] =
    new ParamsAsArgs[Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]] {
      type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => O
      override def toFn[R](
          f: Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11] => R
      ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) =>
        f(Tuple11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11))
      override def paramAt(params: Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11], i: Int): Any = params.productElement(i)
      override def applyFn[R](
          f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R,
          args: Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]
      ): R = f(args._1, args._2, args._3, args._4, args._5, args._6, args._7, args._8, args._9, args._10, args._11)
      override def andThen[R, RR](
          f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R,
          m: R => RR
      ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => RR = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11))
    }
  implicit def tuple12ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]
      : Aux[Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12], (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => *] =
    new ParamsAsArgs[Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]] {
      type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => O
      override def toFn[R](
          f: Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12] => R
      ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) =>
        f(Tuple12(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12))
      override def paramAt(params: Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12], i: Int): Any = params.productElement(i)
      override def applyFn[R](
          f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R,
          args: Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]
      ): R = f(args._1, args._2, args._3, args._4, args._5, args._6, args._7, args._8, args._9, args._10, args._11, args._12)
      override def andThen[R, RR](
          f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R,
          m: R => RR
      ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => RR = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12))
    }
  implicit def tuple13ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]: Aux[
    Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => *
  ] = new ParamsAsArgs[Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => O
    override def toFn[R](
        f: Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) =>
      f(Tuple13(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13))
    override def paramAt(params: Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13], i: Int): Any = params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R,
        args: Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]
    ): R = f(args._1, args._2, args._3, args._4, args._5, args._6, args._7, args._8, args._9, args._10, args._11, args._12, args._13)
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => RR = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) =>
      m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13))
  }
  implicit def tuple14ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]: Aux[
    Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => *
  ] = new ParamsAsArgs[Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => O
    override def toFn[R](
        f: Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) =>
      f(Tuple14(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14))
    override def paramAt(params: Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14], i: Int): Any =
      params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R,
        args: Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]
    ): R =
      f(args._1, args._2, args._3, args._4, args._5, args._6, args._7, args._8, args._9, args._10, args._11, args._12, args._13, args._14)
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) => m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14))
  }
  implicit def tuple15ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]: Aux[
    Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => *
  ] = new ParamsAsArgs[Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => O
    override def toFn[R](
        f: Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) =>
        f(Tuple15(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15))
    override def paramAt(params: Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15], i: Int): Any =
      params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R,
        args: Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]
    ): R = f(
      args._1,
      args._2,
      args._3,
      args._4,
      args._5,
      args._6,
      args._7,
      args._8,
      args._9,
      args._10,
      args._11,
      args._12,
      args._13,
      args._14,
      args._15
    )
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15))
  }
  implicit def tuple16ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]: Aux[
    Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => *
  ] = new ParamsAsArgs[Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => O
    override def toFn[R](
        f: Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) =>
        f(Tuple16(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16))
    override def paramAt(params: Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16], i: Int): Any =
      params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R,
        args: Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]
    ): R = f(
      args._1,
      args._2,
      args._3,
      args._4,
      args._5,
      args._6,
      args._7,
      args._8,
      args._9,
      args._10,
      args._11,
      args._12,
      args._13,
      args._14,
      args._15,
      args._16
    )
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16))
  }
  implicit def tuple17ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]: Aux[
    Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => *
  ] = new ParamsAsArgs[Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => O
    override def toFn[R](
        f: Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) =>
        f(Tuple17(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17))
    override def paramAt(params: Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17], i: Int): Any =
      params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R,
        args: Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]
    ): R = f(
      args._1,
      args._2,
      args._3,
      args._4,
      args._5,
      args._6,
      args._7,
      args._8,
      args._9,
      args._10,
      args._11,
      args._12,
      args._13,
      args._14,
      args._15,
      args._16,
      args._17
    )
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17))
  }
  implicit def tuple18ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]: Aux[
    Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => *
  ] = new ParamsAsArgs[Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => O
    override def toFn[R](
        f: Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) =>
        f(Tuple18(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18))
    override def paramAt(params: Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18], i: Int): Any =
      params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R,
        args: Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]
    ): R = f(
      args._1,
      args._2,
      args._3,
      args._4,
      args._5,
      args._6,
      args._7,
      args._8,
      args._9,
      args._10,
      args._11,
      args._12,
      args._13,
      args._14,
      args._15,
      args._16,
      args._17,
      args._18
    )
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18))
  }
  implicit def tuple19ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]: Aux[
    Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => *
  ] = new ParamsAsArgs[Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => O
    override def toFn[R](
        f: Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) =>
        f(Tuple19(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19))
    override def paramAt(
        params: Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19],
        i: Int
    ): Any = params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R,
        args: Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]
    ): R = f(
      args._1,
      args._2,
      args._3,
      args._4,
      args._5,
      args._6,
      args._7,
      args._8,
      args._9,
      args._10,
      args._11,
      args._12,
      args._13,
      args._14,
      args._15,
      args._16,
      args._17,
      args._18,
      args._19
    )
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19))
  }
  implicit def tuple20ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]: Aux[
    Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => *
  ] = new ParamsAsArgs[Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => O
    override def toFn[R](
        f: Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) =>
        f(Tuple20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20))
    override def paramAt(
        params: Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20],
        i: Int
    ): Any = params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R,
        args: Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]
    ): R = f(
      args._1,
      args._2,
      args._3,
      args._4,
      args._5,
      args._6,
      args._7,
      args._8,
      args._9,
      args._10,
      args._11,
      args._12,
      args._13,
      args._14,
      args._15,
      args._16,
      args._17,
      args._18,
      args._19,
      args._20
    )
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20))
  }
  implicit def tuple21ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]: Aux[
    Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => *
  ] = new ParamsAsArgs[Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => O
    override def toFn[R](
        f: Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21) =>
        f(Tuple21(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21))
    override def paramAt(
        params: Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21],
        i: Int
    ): Any = params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R,
        args: Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]
    ): R = f(
      args._1,
      args._2,
      args._3,
      args._4,
      args._5,
      args._6,
      args._7,
      args._8,
      args._9,
      args._10,
      args._11,
      args._12,
      args._13,
      args._14,
      args._15,
      args._16,
      args._17,
      args._18,
      args._19,
      args._20,
      args._21
    )
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21))
  }
  implicit def tuple22ToFn[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22]: Aux[
    Tuple22[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22],
    (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => *
  ] = new ParamsAsArgs[Tuple22[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22]] {
    type FN[O] = (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => O
    override def toFn[R](
        f: Tuple22[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22] => R
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22) =>
        f(Tuple22(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22))
    override def paramAt(
        params: Tuple22[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22],
        i: Int
    ): Any = params.productElement(i)
    override def applyFn[R](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R,
        args: Tuple22[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22]
    ): R = f(
      args._1,
      args._2,
      args._3,
      args._4,
      args._5,
      args._6,
      args._7,
      args._8,
      args._9,
      args._10,
      args._11,
      args._12,
      args._13,
      args._14,
      args._15,
      args._16,
      args._17,
      args._18,
      args._19,
      args._20,
      args._21,
      args._22
    )
    override def andThen[R, RR](
        f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R,
        m: R => RR
    ): (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => RR =
      (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22) =>
        m(f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22))
  }
}

trait LowPriorityParamsAsArgs1 extends LowPriorityParamsAsArgs0 {
  implicit def unitToFn: Aux[Unit, Function0] = new ParamsAsArgs[Unit] {
    type FN[O] = () => O
    override def toFn[O](f: Unit => O): () => O = () => f(())
    override def paramAt(params: Unit, i: Int): Any = throw new IndexOutOfBoundsException(i.toString)
    override def applyFn[R](f: () => R, args: Unit): R = f()
    override def andThen[R, RR](f: () => R, m: R => RR): () => RR = () => m(f())
  }
}

trait LowPriorityParamsAsArgs0 {
  @implicitNotFound(msg = "Expected arguments: ${I}")
  type Aux[I, _FN[_]] = ParamsAsArgs[I] { type FN[O] = _FN[O] }

  implicit def singleToFn[A1]: Aux[A1, A1 => *] = new ParamsAsArgs[A1] {
    type FN[O] = A1 => O
    override def toFn[R](f: A1 => R): A1 => R = a1 => f(a1)
    override def paramAt(params: A1, i: Int): Any = if (i == 0) params else throw new IndexOutOfBoundsException(i.toString)
    override def applyFn[R](f: A1 => R, args: A1): R = f(args)
    override def andThen[R, RR](f: A1 => R, m: R => RR): A1 => RR = a => m(f(a))
  }
}
