package sttp.tapir.typelevel

import scala.annotation.implicitNotFound

/**
  * View parameters (single type or a tuple) as arguments of a function of the appropriate arity.
  */
trait ParamsAsArgs[I] {
  // FN[R] = (I as args) => R
  type FN[_]

  def toFn[O](f: I => O): FN[O]
  def paramAt(params: I, i: Int): Any
  def applyFn[R](f: FN[R], args: I): R
  def andThen[R, R2](f: FN[R], m: R => R2): FN[R2]
}

object ParamsAsArgs extends LowPriorityParamsAsArgs1 {

  [2..#implicit def tuple1ToFn[[#A1#]]: Aux[Tuple1[[#A1#]], ([#A1#]) => *] = new ParamsAsArgs[Tuple1[[#A1#]]] {
      type FN[O] = ([#A1#]) => O
      override def toFn[R](f: Tuple1[[#A1#]] => R): ([#A1#]) => R = ([#a1#]) => f(Tuple1([#a1#]))
      override def paramAt(params: Tuple1[[#A1#]], i: Int): Any = params.productElement(i)
      override def applyFn[R](f: ([#A1#]) => R, args: Tuple1[[#A1#]]): R = f([#args._1#])
      override def andThen[R, RR](f: ([#A1#]) => R, m: R => RR): ([#A1#]) => RR = ([#a1#]) => m(f([#a1#]))
    }#
  ]
}

trait LowPriorityParamsAsArgs1 extends LowPriorityParamsAsArgs0 {
  implicit def unitToFn: Aux[Unit, Function0] = new ParamsAsArgs[Unit] {
    type FN[O] = () => O
    override def toFn[O](f: Unit => O): () => O = () => f(())
    override def paramAt(params: Unit, i: Int): Any = throw new IndexOutOfBoundsException(i.toString)
    override def applyFn[R](f: () => R, args: Unit): R = f()
    override def andThen[R, RR](f: () => R, m: R => RR): () => RR = () => m(f())
  }
}

trait LowPriorityParamsAsArgs0 {
  @implicitNotFound(msg = "Expected arguments: ${I}")
  type Aux[I, _FN[_]] = ParamsAsArgs[I] { type FN[O] = _FN[O] }

  implicit def singleToFn[A1]: Aux[A1, A1 => *] = new ParamsAsArgs[A1] {
    type FN[O] = A1 => O
    override def toFn[R](f: A1 => R): A1 => R = a1 => f(a1)
    override def paramAt(params: A1, i: Int): Any = if (i == 0) params else throw new IndexOutOfBoundsException(i.toString)
    override def applyFn[R](f: A1 => R, args: A1): R = f(args)
    override def andThen[R, RR](f: A1 => R, m: R => RR): A1 => RR = a => m(f(a))
  }
}
